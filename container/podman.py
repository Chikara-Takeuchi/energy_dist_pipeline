#!/usr/bin/python3

import sys
import json
import subprocess
import threading

'''
This script is a wrapper of the podman command on RHEL 7. It helps podman 1.6.4 to push a correct manifest file the 
remote registry.

Author: Peng Lian
Date: 10/24/2023
'''


PODMAN_BIN = subprocess.check_output(['which', 'podman']).decode().strip()

def execute_command(command, *args):
    '''
    Execute command and print the real time output to stdout
    '''

    # Function to process and print output in real time
    def process_output(pipe):
        for line in pipe:
            print(line.decode(), end="")

    cmd = [command, *args]
    with subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as process:
        stdout_thread = threading.Thread(target=process_output, args=(process.stdout,))
        stderr_thread = threading.Thread(target=process_output, args=(process.stderr,))

        stdout_thread.start()
        stderr_thread.start()

        # Wait for the process to complete
        process.wait()

        # Ensure that both threads finish
        stdout_thread.join()
        stderr_thread.join()

        return process.returncode


def fix_manifest(registry, tag):
    '''
    '.gzip' is missing in the 'mediaType' of 'layers' in the manifest file generated by podman 1.6.4.
    This function scans the 'mediaType' and add the '.gzip' suffix.
    '''
    print(f'Fixing manifest for {registry}:{tag} ...')

    # get graph root
    output = subprocess.check_output([PODMAN_BIN, 'info', '-f', 'json'])
    info = json.loads(output.decode())
    graphRoot = info['store']['GraphRoot']

    # get image ID
    output = subprocess.check_output([PODMAN_BIN, 'inspect', f'{registry}:{tag}'])
    imageID = eval(output.decode().replace('true', 'True').replace('false', 'False'))[0]['Id']

    # read manifest
    imageManifestFile = f'{graphRoot}/overlay-images/{imageID}/manifest'
    manifest = json.loads(open(imageManifestFile).readlines()[0])

    # update the layers mediaType with .gzip
    changed = False
    for l in manifest['layers']:
        if l['mediaType'].endswith('tar'):
            l['mediaType'] = f"{l['mediaType']}.gzip"
            changed = True

    # write the fixed manifest to file
    if changed:
        with open(imageManifestFile, 'w') as f:
            f.write(json.dumps(manifest).replace(' ', '') + '\n')
        f.close()
        print('Manifest updated.')

    return json.dumps(manifest)


if __name__ == "__main__":

    # only engage when 'push' command is called
    if len(sys.argv) >= 2 and sys.argv[1] == 'push':
        print(f"Executing push: {' '.join(sys.argv[1:])}")

        # get registry and tag from the last argv 
        last_argv = sys.argv[-1]
        if last_argv.find(':') > 0:
            Tag = last_argv.strip().split(':')[-1]
            Registry = ':'.join(last_argv.strip().split(':')[:-1])

            # fix manifest
            fix_manifest(registry=Registry, tag=Tag)

        execute_command(PODMAN_BIN, *sys.argv[1:])
    else:
        execute_command(PODMAN_BIN, *sys.argv[1:])

